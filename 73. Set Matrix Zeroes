class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;           // Number of rows
        int m = matrix[0].length;        // Number of columns

        boolean[] row = new boolean[n];  // Track rows to be zeroed
        boolean[] col = new boolean[m];  // Track columns to be zeroed

        // First pass: mark the rows and columns
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 0) {
                    row[i] = true;
                    col[j] = true;
                }
            }
        }

        // Second pass: set zeroes based on markers
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (row[i] || col[j]) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}



class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;         
        int m = matrix[0].length;      
        int col1 = 1;

        // 1st pass: mark rows and columns that need to be zeroed
        for (int i = 0; i < n; i++) {
            if (matrix[i][0] == 0) col1 = 0;
            for (int j = 1; j < m; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }

        // 2nd pass: set matrix cells to zero using markers (skip first row & column)
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;  // ← FIX: use '=' not '=='
                }
            }
        }

        // Zero first row if needed
        if (matrix[0][0] == 0) {
            for (int j = 0; j < m; j++) {
                matrix[0][j] = 0;
            }
        }

        // Zero first column if needed
        if (col1 == 0) {
            for (int i = 0; i < n; i++) {
                matrix[i][0] = 0;
            }
        }
    }
}
